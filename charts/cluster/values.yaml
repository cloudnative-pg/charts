# -- Override the name of the chart
nameOverride: ""
# -- Override the full name of the chart
fullnameOverride: ""

###
# -- Type of the CNPG database. Available types:
# * `postgresql`
# * `postgis`
type: postgresql

###
# -- Cluster mode of operation. Available modes:
# * `standalone` - default mode. Creates new or updates an existing CNPG cluster.
# * `import` - Creates a cluster by utilizing `pg_dump -Fc` from existing PostgreSQL, allows to migrate even from very old versions of PostgreSQL.
# * `recovery` - Creates a cluster from a backup, object store, pg_basebackup or volumeSnapshot.
# * `replica` - Creates a replica cluster from object store or pg_basebackup with settings defined in recovery method.
mode: standalone


cluster:
  # -- Number of instances
  instances: 3

  # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
  # <image>:<tag>@sha256:<digestValue>
  imageName: ""  # Default value depends on type (postgresql/postgis/timescaledb)

  # -- Image pull policy. One of Always, Never or IfNotPresent. If not defined, it defaults to IfNotPresent. Cannot be updated.
  # More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  imagePullPolicy: IfNotPresent

  # -- The list of pull secrets to be used to pull the images.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-LocalObjectReference
  imagePullSecrets: []

  storage:
    size: 8Gi
    storageClass: ""

  walStorage:
    size: 1Gi
    storageClass: ""

  # -- The UID of the postgres user inside the image, defaults to 26
  postgresUID: 26

  # -- The GID of the postgres user inside the image, defaults to 26
  postgresGID: 26

  # -- Resources requirements of every generated Pod.
  # Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
  # We strongly advise you use the same setting for limits and requests so that your cluster pods are given a Guaranteed QoS.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/
  resources: {}
    # limits:
    #   cpu: 2000m
    #   memory: 8Gi
    # requests:
    #   cpu: 2000m
    #   memory: 8Gi

  priorityClassName: ""

  # -- Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated. It can be switchover (default) or restart.
  primaryUpdateMethod: switchover

  # -- Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated: it can be automated (unsupervised - default) or manual (supervised)
  primaryUpdateStrategy: unsupervised

  # -- The instances' log level, one of the following values: error, warning, info (default), debug, trace
  logLevel: "info"

  # -- Affinity/Anti-affinity rules for Pods.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
  affinity:
    topologyKey: topology.kubernetes.io/zone

  # -- The configuration for the CA and related certificates.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
  certificates: {}

  # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
  # If the secret is not present, the operator will automatically create one.
  # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
  # and then blank the password of the postgres user by setting it to NULL.
  enableSuperuserAccess: true
  superuserSecret: ""

  # -- This feature automatically manages physical replication slots for each hot standby replica in
  # the High Availability cluster, both in the primary and the standby.
  # See: https://cloudnative-pg.io/documentation/current/replication/#replication-slots-for-high-availability
  replicationSlots:
    highAvailability:
      enabled: true
      slotPrefix: _cnpg_
    updateInterval: 30

  # -- This feature enables declarative management of existing roles, as well as the creation of new roles if they are not
  # already present in the database.
  # See: https://cloudnative-pg.io/documentation/current/declarative_role_management/
  roles: []
    # - name: dante
    #   ensure: present
    #   comment: Dante Alighieri
    #   login: true
    #   superuser: false
    #   inRoles:
    #     - pg_monitor
    #     - pg_signal_backend

  monitoring:
    # -- Whether to enable monitoring
    enabled: false
    podMonitor:
      # -- Whether to enable the PodMonitor
      enabled: true
      # --The list of relabelings for the PodMonitor.
      # Applied to samples before scraping.
      relabelings: []
        # - targetLabel: environment
        #   replacement: production
        # - targetLabel: team
        #   replacement: alpha
      # -- The list of metric relabelings for the PodMonitor.
      # Applied to samples before ingestion.
      metricRelabelings: []
        # - action: replace
        #   sourceLabels:
        #     - cluster
        #   targetLabel: cnpg_cluster
        # - action: labeldrop
        #   regex: cluster
    prometheusRule:
      # -- Whether to enable the PrometheusRule automated alerts
      enabled: true
      # -- Exclude specified rules
      excludeRules: []
        # - CNPGClusterZoneSpreadWarning
    # -- Whether the default queries should be injected.
    # Set it to true if you don't want to inject default queries into the cluster.
    disableDefaultQueries: false
    # -- Custom Prometheus metrics
    # Will be stored in the ConfigMap
    customQueries: []
    #  - name: "pg_cache_hit_ratio"
    #    query: "SELECT current_database() as datname, sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)) as ratio FROM pg_statio_user_tables;"
    #    metrics:
    #      - datname:
    #          usage: "LABEL"
    #          description: "Name of the database"
    #      - ratio:
    #          usage: GAUGE
    #          description: "Cache hit ratio"
    # -- The list of secrets containing the custom queries
    # Secrets should be created manually
    customQueriesSecret: []
    #  - name: custom-queries-secret
    #    key: custom-queries

  # -- Configuration of the PostgreSQL server.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-PostgresConfiguration
  postgresql: {}
    # max_connections: 300

  # -- BootstrapInitDB is the configuration of the bootstrap process when initdb is used.
  # See: https://cloudnative-pg.io/documentation/current/bootstrap/
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-bootstrapinitdb
  initdb: {}
    # database: app
    # owner: "" # Defaults to the database name
    # secret:
    #   name: "" # Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
    # options: []
    # encoding: UTF8
    # postInitSQL:
    #   - CREATE EXTENSION IF NOT EXISTS vector;
    # postInitApplicationSQL: []
    # postInitTemplateSQL: []

  additionalLabels: {}
  annotations: {}


import:
  # -- Choose one of types from `typeSettings`,
  # https://cloudnative-pg.io/documentation/current/database_import/
  # All types require: configure `recovery.method` to `pgBasebackup` and `recovery.methodSettings` accordingly
  # Please be aware off https://cloudnative-pg.io/documentation/current/database_import/#import-optimizations
  type: ""
  typeSettings:
    microservice:
      # -- Database name to import
      database: ""
      # -- Configure database owner, defaults to the database name
      owner: ""
      # -- Execute defined SQL queries in the application database after import, optional
      postImportApplicationSQL: []
      # - CREATE EXTENSION IF NOT EXISTS vector;
    monolith:
      # -- List of databases that is required by the imported. Wildcard allow to import all databases.
      databases: []
      # -- List of role that is required by the imported databases. Wildcard allow to import all roles.
      # Notes:
      # 1. postgres, streaming_replica & cnp_pooler_pgbouncer roles will not be imported from origin
      # 2. the SUPERUSER option is removed from any imported role
      roles: []


replica:
  # -- Choose one of topologies from `topologySettings`,
  # https://cloudnative-pg.io/documentation/current/replica_cluster/
  # standalone: configure `recovery.method` to one of `objectStorage` or `pgBasebackup` and `recovery.methodSettings` accordingly
  # distributed: configure `recovery.method` to `objectStorage` and `recovery.methodSettings`
  topology: ""
  topologySettings:
    standalone:
      # -- Deleyed replication, disabled if empty, set enable set time, f.e: 1h
      # https://cloudnative-pg.io/documentation/current/replica_cluster/#delayed-replicas
      minApplyDelay: ""
    distributed:
      # -- Distributed topology requires to use objectStorage in both recovery and backups
      primary: true
      # -- Promoting a Replica to a Primary Cluster
      # demotionToken obtrained from demoted primary should set to promotionToken on replica
      # Use `kubectl get cluster cluster-eu-south -o jsonpath='{.status.demotionToken}'`
      # https://cloudnative-pg.io/documentation/current/replica_cluster/#demoting-a-primary-to-a-replica-cluster
      # https://cloudnative-pg.io/documentation/current/replica_cluster/#promoting-a-replica-to-a-primary-cluster
      promotionToken: ""


recovery:
  # -- One of methods from `methodSettings`.
  method: ""

  pitrTarget:
    # -- Point in time recovery target.
    # Work with backup, objectStorage and volumeSnapshot methods.
    # Time should be set in RFC3339 format.
    time: ""

  existingSecret:
    # -- If the secret name is set, helm chart will create one which needed.
    # Existing secret should contains all required veriables for chosen method or provider.
    name: ""

  methodSettings:
    backup:
      # -- Recovers a CNPG cluster from a backups.postgresql.cnpg.io custom resource (PITR supported).
      # https://cloudnative-pg.io/documentation/current/recovery/#recovery-from-a-backup-object
      # Needs to be on the same cluster in the same namespace.
      # Name of the backup to recover from.
      name: ""
    objectStorage:
      # -- Recovers a CNPG cluster from a barman object store (PITR supported).
      # https://cloudnative-pg.io/documentation/current/recovery/#recovery-from-an-object-store
      # https://cloudnative-pg.io/documentation/current/replica_cluster/#example-of-standalone-replica-cluster-from-an-object-store
      # The original cluster name when used in backups. Also known as serverName.
      clusterName: ""
      # -- Enables objectStorage provider. One of providers from `providerSettings`.
      # https://cloudnative-pg.io/documentation/current/appendixes/object_stores/#appendix-a-common-object-stores-for-backups
      provider: ""
      providerSettings:
        s3:
          region: ""
          bucket: ""
          path: "/"
          # -- Configures `ACCESS_KEY_ID` in secret
          accessKey: ""
          # -- Configures `ACCESS_SECRET_KEY` in secret
          secretKey: ""
        azure:
          path: "/"
          # -- Configures `AZURE_CONNECTION_STRING` in secret
          connectionString: ""
          # -- Configures `AZURE_STORAGE_ACCOUNT` in secret
          storageAccount: ""
          # -- Configures `AZURE_STORAGE_KEY` in secret
          storageKey: ""
          # -- Configures `AZURE_STORAGE_SAS_TOKEN` in secret
          storageSasToken: ""
          containerName: ""
          serviceName: blob
          inheritFromAzureAD: false
        google:
          path: "/"
          bucket: ""
          gkeEnvironment: false
          # -- Configures `APPLICATION_CREDENTIALS` in secret
          applicationCredentials: ""
      # -- Overrides the provider specific default endpoint. Defaults to:
      # S3: https://s3.<region>.amazonaws.com"
      # Leave empty if using the default S3 endpoint
      endpointURL: ""
      # -- Specifies a CA bundle to validate a privately signed certificate.
      endpointCA:
        # -- Creates a secret with the given value if true, otherwise uses an existing secret.
        create: false
        name: ""
        key: ""
        value: ""
      # -- Overrides the provider specific default path. Defaults to:
      # S3: s3://<bucket><path>
      # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
      # Google: gs://<bucket><path>
      destinationPath: ""
    volumeSnapshot:
      # -- Recovers a CNPG cluster from a volume snapshot (PITR supported).
      # https://cloudnative-pg.io/documentation/current/recovery/#recovery-from-volumesnapshot-objects
      storageSnapshotName: ""
      # -- WAL snapshot name, optional, need to be set if WAL stored on separate PVC.
      walSnapshotName: ""
    pgBasebackup:
      # -- Recovers a CNPG cluster via streaming replication protocol.
      # https://cloudnative-pg.io/documentation/current/bootstrap/#bootstrap-from-a-live-cluster-pg_basebackup
      # https://cloudnative-pg.io/documentation/current/replica_cluster/#example-of-standalone-replica-cluster-using-pg_basebackup
      connectionParameters:
        host: ""
        port: 5432
        user: ""
        # -- SSL mode to use while connecting to host.
        # Possible secure options: `verify-full`, `verify-ca`, `require` and insecure: `prefer`, `allow`, `disable`.
        # For more details please see: https://www.postgresql.org/docs/current/libpq-ssl.html#LIBPQ-SSL-PROTECTION
        sslMode: verify-full
        # -- Database on source server, optional.
        # If `pgBasebackup.database` set and this setting is empty - will use same database name.
        database: ""
      # -- Configure one of supported auth types: `password` or `tls`
      auth: password
      authDetails:
        # -- Configures `password` in secret
        password: ""
        tls:
          # -- Configures `tls.key` in secret
          key: ""
          # -- Configures `tls.crt` in secret
          crt: ""
          # -- Configures `ca.crt` in secret
          ca: ""
      # -- Configure application database, optional and ignored with replica
      # https://cloudnative-pg.io/documentation/current/bootstrap/#configure-the-application-database
      database: ""
      # -- Configure database owner, defaults to the database name
      owner: ""
      # -- Name of the secret containing the initial credentials for the owner of the user database.
      # Secret must contains `username` key that match `owner` and `password` key.
      # If empty - password will be generated randomly and saved to secret generated by Operator.
      ownerSecret: ""


backups:
  existingSecret:
    # -- If the secret name is set, helm chart will create one which needed.
    # Existing secret should contains all required veriables for chosen provider.
    name: ""

  objectStorage:
    # -- Enables objectStorage provider. One of providers from `providerSettings`, empty string - disables objectStorage backups.
    # https://cloudnative-pg.io/documentation/current/appendixes/object_stores/#appendix-a-common-object-stores-for-backups
    provider: ""
    providerSettings:
      s3:
        region: ""
        bucket: ""
        path: "/"
        # -- Configures `ACCESS_KEY_ID` in secret
        accessKey: ""
        # -- Configures `ACCESS_SECRET_KEY` in secret
        secretKey: ""
      azure:
        path: "/"
        # -- Configures `AZURE_CONNECTION_STRING` in secret
        connectionString: ""
        # -- Configures `AZURE_STORAGE_ACCOUNT` in secret
        storageAccount: ""
        # -- Configures `AZURE_STORAGE_KEY` in secret
        storageKey: ""
        # -- Configures `AZURE_STORAGE_SAS_TOKEN` in secret
        storageSasToken: ""
        containerName: ""
        serviceName: blob
        inheritFromAzureAD: false
      google:
        path: "/"
        bucket: ""
        gkeEnvironment: false
        # -- Configures `APPLICATION_CREDENTIALS` in secret
        applicationCredentials: ""
    # -- Overrides the provider specific default endpoint. Defaults to:
    # S3: https://s3.<region>.amazonaws.com"
    endpointURL: ""  # Leave empty if using the default S3 endpoint
    endpointCA:
      # -- Specifies a CA bundle to validate a privately signed certificate.
      # Creates a secret with the given value if true, otherwise uses an existing secret.
      create: false
      name: ""
      key: ""
      value: ""
    # -- Overrides the provider specific default path. Defaults to:
    # S3: s3://<bucket><path>
    # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
    # Google: gs://<bucket><path>
    destinationPath: ""

    wal:
      # -- WAL compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt WAL files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of WAL files to be archived or restored in parallel.
      maxParallel: 1
    data:
      # -- Data compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
      compression: gzip
      # -- Whether to instruct the storage provider to encrypt data files. One of `` (use the storage container default), `AES256` or `aws:kms`.
      encryption: AES256
      # -- Number of data files to be archived or restored in parallel.
      jobs: 2

  volumeSnapshot:
    # -- To enable volumeSnapshot configure className and add scheduledBackup with method `volumeSnapshot`
    # https://cloudnative-pg.io/documentation/current/backup_volumesnapshot/#how-to-configure-volume-snapshot-backups
    className: ""
    # -- WAL snapshots class name, if empty - defaults to `className`
    walClassName: ""
    # -- Hot and cold backups
    # https://cloudnative-pg.io/documentation/current/backup_volumesnapshot/#hot-and-cold-backups
    online: true
    onlineConfiguration:
      immediateCheckpoint: true
      waitForArchive: true
    # -- Persistence of volume snapshot objects
    # https://cloudnative-pg.io/documentation/current/backup_volumesnapshot/#persistence-of-volume-snapshot-objects
    # One of `none`, `backup`, `cluster`,
    # note: `retentionPolicy` will work only with `backup`
    snapshotOwnerReference: backup

  # -- Backup target configuration. One of `prefer-standby`, `primary`.
  # https://cloudnative-pg.io/documentation/current/backup/#backup-from-a-standby
  target: prefer-standby

  # -- Retention policy for backups
  retentionPolicy: 30d

  scheduledBackups:
    -
      # -- Scheduled backup name
      name: daily-backup
      # -- Schedule in cron format
      schedule: "0 0 0 * * *"
      # -- Backup owner reference
      backupOwnerReference: self
      # -- Backup method, can be `barmanObjectStore` (default) or `volumeSnapshot`
      method: barmanObjectStore


poolers: []
  # -
  #   # -- Pooler name
  #   name: rw
  #   # -- PgBouncer type of service to forward traffic to.
  #   type: rw
  #   # -- PgBouncer pooling mode
  #   poolMode: transaction
  #   # -- Number of PgBouncer instances
  #   instances: 3
  #   # -- PgBouncer configuration parameters
  #   parameters:
  #     max_client_conn: "1000"
  #     default_pool_size: "25"
  #   monitoring:
  #     # -- Whether to enable monitoring
  #     enabled: false
  #     podMonitor:
  #       # -- Whether to enable the PodMonitor
  #       enabled: true
  #       # --The list of relabelings for the PodMonitor.
  #       # Applied to samples before scraping.
  #       relabelings: []
  #         # - targetLabel: type
  #         #   replacement: rw
  #         # - targetLabel: environment
  #         #   replacement: production
  #         # - targetLabel: team
  #         #   replacement: alpha
  #       # -- The list of metric relabelings for the PodMonitor.
  #       # Applied to samples before ingestion.
  #       metricRelabelings: []
  #         # - action: replace
  #         #   sourceLabels:
  #         #     - cluster
  #         #   targetLabel: cnpg_cluster
  #         # - action: labeldrop
  #         #   regex: cluster
  #   # -- Custom PgBouncer deployment template.
  #   # Use to override image, specify resources, etc.
  #   template: {}
  # -
  #   # -- Pooler name
  #   name: ro
  #   # -- PgBouncer type of service to forward traffic to.
  #   type: ro
  #   # -- PgBouncer pooling mode
  #   poolMode: transaction
  #   # -- Number of PgBouncer instances
  #   instances: 3
  #   # -- PgBouncer configuration parameters
  #   parameters:
  #     max_client_conn: "1000"
  #     default_pool_size: "25"
  #   monitoring:
  #     # -- Whether to enable monitoring
  #     enabled: false
  #     podMonitor:
  #         # -- Whether to enable the PodMonitor
  #       enabled: true
  #       # -- podMonitor relabelings
  #       relabelings: []
  #         # - targetLabel: type
  #         #   replacement: ro
  #         # - targetLabel: environment
  #         #   replacement: production
  #         # - targetLabel: team
  #         #   replacement: alpha
  #       # -- podMonitor metricRelabelings
  #       metricRelabelings: []
  #         # - action: replace
  #         #   sourceLabels:
  #         #     - cluster
  #         #   targetLabel: cnpg_cluster
  #         # - action: labeldrop
  #         #   regex: cluster
  #   # -- Custom PgBouncer deployment template.
  #   # Use to override image, specify resources, etc.
  #   template: {}
