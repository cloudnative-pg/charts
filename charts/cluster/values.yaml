nameOverride: ""
fullnameOverride: ""

##
# Type of the CNPG database. Available types:
# * `postgresql`
# * `postgis` # TODO
# * `timescaledb` # TODO
type: postgresql

##
# Cluster mode of operation. Available modes:
# * `standalone` - default mode. Creates new or updates an existing CNPG cluster.
# * `replica` - Creates a replica cluster from an existing CNPG cluster. # TODO
# * `recovery` - Same as standalone but creates a cluster from a backup, object store or via pg_basebackup. # TODO
mode: standalone

##
# Recovery settings if the chosen mode is `recovery`.
recovery:
  ##
  # Available recovery methods:
  # * `backup` - Recovers a CNPG cluster from a CNPG backup (PITR supported) Needs to be on the same cluster in the same namespace. # TODO
  # * `object_store` - Recovers a CNPG cluster from a barman object store (PITR supported). # TODO
  # * `pg_basebackup` - Recovers a CNPG cluster viaa streaming replication protocol. Useful if you want to
  #        migrate databases to CloudNativePG, even from outside Kubernetes. # TODO
  method: backup

##
# Database cluster configuration
cluster:
  # Number of instances
  instances: 3

  # Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
  # <image>:<tag>@sha256:<digestValue>
  imageName: "ghcr.io/cloudnative-pg/postgresql:15.2"

  # Image pull policy. One of Always, Never or IfNotPresent. If not defined, it defaults to IfNotPresent. Cannot be updated.
  # More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  imagePullPolicy: IfNotPresent

  # The list of pull secrets to be used to pull the images
  # See: https://cloudnative-pg.io/documentation/current/api_reference/#LocalObjectReference
  imagePullSecrets: []

  storage:
    size: 8Gi
    storageClass: ""

  monitoring:
    enablePodMonitor: true
    grafanaDashboard:
        enable: true # TODO

  # Resources requirements of every generated Pod.
  # Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
  # We strongly advise you use the same setting for limits and requests so that your cluster pods are given a Guaranteed QoS.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/
  resources:
    # limits:
    #   cpu: 2000m
    #   memory: 8Gi
    # requests:
    #   cpu: 2000m
    #   memory: 8Gi

  priorityClassName: "" # Waiting for https://github.com/cloudnative-pg/cloudnative-pg/discussions/1609

  # Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated. It can be switchover (default) or in-place (restart).
  primaryUpdateMethod: switchover

  # Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated: it can be automated (unsupervised - default) or manual (supervised)
  primaryUpdateStrategy: unsupervised

  # The instances' log level, one of the following values: error, warning, info (default), debug, trace
  logLevel: "info"

  # Affinity/Anti-affinity rules for Pods
  # See: https://cloudnative-pg.io/documentation/current/api_reference/#AffinityConfiguration
  affinity:
    topologyKey: topology.kubernetes.io/zone

  # The configuration for the CA and related certificates
  # See: https://cloudnative-pg.io/documentation/current/api_reference/#CertificatesConfiguration
  certificates:

  # When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
  # If the secret is not present, the operator will automatically create one.
  # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
  # and then blank the password of the postgres user by setting it to NULL.
  enableSuperuserAccess: true
  superuserSecret: ""

  # Configuration of the PostgreSQL server
  # See: https://cloudnative-pg.io/documentation/current/api_reference/#PostgresConfiguration
  postgresql:

##
# Database cluster backup configuration
backups:
  enabled: true

  # TODO: Improve this section with support for all providers

  provider: s3
  s3:
    endpointURL: ""
    bucket: ""
    path: ""
    accessKey: ""
    secretKey: ""

  scheduledBackups:
    - schedule: "0 0 * * *" # Daily at midnight
      backupOwnerReference: self

##
# Database cluster PgBouncer configuration
pooler:
  enabled: false
  poolMode: transaction
  parameters:
    max_client_conn: "1000"
    default_pool_size: "25"