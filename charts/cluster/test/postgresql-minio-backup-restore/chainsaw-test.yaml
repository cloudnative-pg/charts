apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: postgresql-standalone-cluster
spec:
  timeouts:
    apply: 1s
    assert: 2m
    cleanup: 1m
  steps:
    - name: Clear the MinIO bucket
      try:
        - apply:
            file: ./minio-cleanup.yaml
        - assert:
            resource:
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: minio-cleanup
              status:
                succeeded: 1
      catch:
        - describe:
            apiVersion: batch/v1
            kind: Job
        - podLogs:
            name: minio-cleanup
    - name: Install the standalone cluster
      try:
        - script:
            content: |
              kubectl -n $NAMESPACE create secret generic kube-root-ca.crt --from-literal=ca.crt="$(kubectl -n kube-system get configmaps kube-root-ca.crt -o jsonpath='{.data.ca\.crt}')" --dry-run=client -o yaml | kubectl apply -f -
              helm upgrade \
                --install \
                --namespace $NAMESPACE \
                --values ./standalone.yaml \
                --wait \
                standalone ../../
        - assert:
            resource:
              apiVersion: postgresql.cnpg.io/v1
              kind: Cluster
              metadata:
                name: standalone-cluster
              status:
                readyInstances: 2
      catch:
        - describe:
            apiVersion: postgresql.cnpg.io/v1
            kind: Cluster
    - name: Crate a table
      try:
        - apply:
            file: ./data-write.yaml
        - assert:
            resource:
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: data-write
              status:
                succeeded: 1
    - name: Create a backup
      try:
        - apply:
            file: ./backup.yaml
        - assert:
            resource:
              apiVersion: postgresql.cnpg.io/v1
              kind: Backup
              metadata:
                name: post-init-backup
              spec:
                cluster:
                  name: standalone-cluster
                method: barmanObjectStore
              status:
                phase: running
        - apply:
            file: ./checkpoint.yaml
        - assert:
            resource:
              apiVersion: postgresql.cnpg.io/v1
              kind: Backup
              metadata:
                name: post-init-backup
              spec:
                cluster:
                  name: standalone-cluster
                method: barmanObjectStore
              status:
                phase: completed
      timeouts:
        apply: 1s
        assert: 10m
      catch:
        - describe:
            apiVersion: postgresql.cnpg.io/v1
            kind: Backup
    - name: Create a recovery cluster from that backup
      try:
        - script:
            content: |
              helm upgrade \
                --install \
                --namespace $NAMESPACE \
                --values ./recovery-backup.yaml \
                --wait \
                recovery-backup ../../
        - assert:
            resource:
              apiVersion: postgresql.cnpg.io/v1
              kind: Cluster
              metadata:
                name: standalone-cluster
              status:
                readyInstances: 2
        - apply:
            file: data-test.yaml
        - assert:
            resource:
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: data-test
              status:
                succeeded: 1
    - name: Cleanup
      try:
        - script:
            content: |
              helm uninstall --namespace $NAMESPACE standalone
